// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using BlazorLogin.Models;

#nullable disable

namespace BlazorLogin.Data
{
    public partial class TEMPLATE20Context : DbContext
    {
        public TEMPLATE20Context()
        {
        }

        public TEMPLATE20Context(DbContextOptions<TEMPLATE20Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<ActivityCenter> ActivityCenter { get; set; }
        public virtual DbSet<ActivityCenterAllocateRatio> ActivityCenterAllocateRatio { get; set; }
        public virtual DbSet<ActivityCenterCost> ActivityCenterCost { get; set; }
        public virtual DbSet<ActivityCenterTree> ActivityCenterTree { get; set; }
        public virtual DbSet<ActivityCenterWorkRate> ActivityCenterWorkRate { get; set; }
        public virtual DbSet<ActivityCost> ActivityCost { get; set; }
        public virtual DbSet<ActivityTree> ActivityTree { get; set; }
        public virtual DbSet<ActualActivityTime> ActualActivityTime { get; set; }
        public virtual DbSet<ActualWorkHour> ActualWorkHour { get; set; }
        public virtual DbSet<BusinessUnit> BusinessUnit { get; set; }
        public virtual DbSet<BusinessUnitResource> BusinessUnitResource { get; set; }
        public virtual DbSet<Classification> Classification { get; set; }
        public virtual DbSet<ClassificationTree> ClassificationTree { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyConfig> CompanyConfig { get; set; }
        public virtual DbSet<CompanyTransaction> CompanyTransaction { get; set; }
        public virtual DbSet<CurrencyExchange> CurrencyExchange { get; set; }
        public virtual DbSet<CustomerServiceCost> CustomerServiceCost { get; set; }
        public virtual DbSet<CustomerServiceCostSum> CustomerServiceCostSum { get; set; }
        public virtual DbSet<DataSourceSetting> DataSourceSetting { get; set; }
        public virtual DbSet<Dictionary> Dictionary { get; set; }
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<DriverActivity> DriverActivity { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EntityClassificationTree> EntityClassificationTree { get; set; }
        public virtual DbSet<EntityParameter> EntityParameter { get; set; }
        public virtual DbSet<EntityParameterValue> EntityParameterValue { get; set; }
        public virtual DbSet<EntityProperty> EntityProperty { get; set; }
        public virtual DbSet<Function> Function { get; set; }
        public virtual DbSet<MachineGroup> MachineGroup { get; set; }
        public virtual DbSet<MachineGroupActivity> MachineGroupActivity { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MoListTmp> MoListTmp { get; set; }
        public virtual DbSet<MoMaterialCost> MoMaterialCost { get; set; }
        public virtual DbSet<MoMaterialCostVer> MoMaterialCostVer { get; set; }
        public virtual DbSet<MoProductCost> MoProductCost { get; set; }
        public virtual DbSet<MoProductCostVer> MoProductCostVer { get; set; }
        public virtual DbSet<Model> Model { get; set; }
        public virtual DbSet<ModelSnapshot> ModelSnapshot { get; set; }
        public virtual DbSet<ObjectClass> ObjectClass { get; set; }
        public virtual DbSet<PartStock> PartStock { get; set; }
        public virtual DbSet<PartStockBom> PartStockBom { get; set; }
        public virtual DbSet<PartStockMovement> PartStockMovement { get; set; }
        public virtual DbSet<PartStockMovementVer> PartStockMovementVer { get; set; }
        public virtual DbSet<PartStockSum> PartStockSum { get; set; }
        public virtual DbSet<PartStockSumVer> PartStockSumVer { get; set; }
        public virtual DbSet<PartStockVer> PartStockVer { get; set; }
        public virtual DbSet<Period> Period { get; set; }
        public virtual DbSet<PeriodData> PeriodData { get; set; }
        public virtual DbSet<PeriodDataRun> PeriodDataRun { get; set; }
        public virtual DbSet<PeriodDataRunLog> PeriodDataRunLog { get; set; }
        public virtual DbSet<PeriodDataRunPerf> PeriodDataRunPerf { get; set; }
        public virtual DbSet<PickList> PickList { get; set; }
        public virtual DbSet<PickListValue> PickListValue { get; set; }
        public virtual DbSet<ProductPeriodCost> ProductPeriodCost { get; set; }
        public virtual DbSet<ProjectCost> ProjectCost { get; set; }
        public virtual DbSet<ProjectCostAllocation> ProjectCostAllocation { get; set; }
        public virtual DbSet<ProjectCostAllocationSum> ProjectCostAllocationSum { get; set; }
        public virtual DbSet<ProjectCostAllocationToInvSum> ProjectCostAllocationToInvSum { get; set; }
        public virtual DbSet<ProjectCostSum> ProjectCostSum { get; set; }
        public virtual DbSet<ProjectDriverValue> ProjectDriverValue { get; set; }
        public virtual DbSet<PurchaseMaterial> PurchaseMaterial { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceAdjustmentCost> ResourceAdjustmentCost { get; set; }
        public virtual DbSet<SalesOrderItem> SalesOrderItem { get; set; }
        public virtual DbSet<SalesOrderItemReturn> SalesOrderItemReturn { get; set; }
        public virtual DbSet<SalesOrderSum> SalesOrderSum { get; set; }
        public virtual DbSet<School> School { get; set; }
        public virtual DbSet<StandardActivityTime> StandardActivityTime { get; set; }
        public virtual DbSet<StandardWorkHour> StandardWorkHour { get; set; }
        public virtual DbSet<Transaction> Transaction { get; set; }
        public virtual DbSet<TransferProfit> TransferProfit { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<UserGroupFunction> UserGroupFunction { get; set; }
        public virtual DbSet<UserUserGroup> UserUserGroup { get; set; }
        public virtual DbSet<ValueChain> ValueChain { get; set; }
        public virtual DbSet<ValueObject> ValueObject { get; set; }
        public virtual DbSet<ValueObjectCost> ValueObjectCost { get; set; }
        public virtual DbSet<ValueObjectCostScope> ValueObjectCostScope { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_Taiwan_Stroke_CI_AS");

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ActivityNo }, "IX_Activity_ActivityNo")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.Name }, "IX_Activity_Name")
                    .IsUnique();

                entity.HasIndex(e => e.ParentActivityId, "IX_Activity_Parent");

                entity.Property(e => e.ActivityNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProductCostType).HasMaxLength(50);

                entity.Property(e => e.ProductionAttr).HasMaxLength(50);

                entity.Property(e => e.QualityAttr).HasMaxLength(50);

                entity.Property(e => e.ReasonGroup).HasMaxLength(50);

                entity.Property(e => e.ServiceAttr).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.Property(e => e.ValueAddedAttr).HasMaxLength(50);

                entity.Property(e => e.ValueObjectType).HasMaxLength(50);

                entity.HasOne(d => d.ActivityDriver)
                    .WithMany(p => p.ActivityActivityDriver)
                    .HasForeignKey(d => d.ActivityDriverId)
                    .HasConstraintName("FK_Activity_ActivityDriver");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Activity)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity_Company");

                entity.HasOne(d => d.ParentActivity)
                    .WithMany(p => p.InverseParentActivity)
                    .HasForeignKey(d => d.ParentActivityId)
                    .HasConstraintName("FK_Activity_Parent");

                entity.HasOne(d => d.ServiceDriver)
                    .WithMany(p => p.ActivityServiceDriver)
                    .HasForeignKey(d => d.ServiceDriverId)
                    .HasConstraintName("FK_Activity_ServiceDriver");
            });

            modelBuilder.Entity<ActivityCenter>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ActivityCenterNo }, "IX_ActivityCenter_ActivityCenterNo")
                    .IsUnique();

                entity.HasIndex(e => e.ParentActivityCenterId, "IX_ActivityCenter_Parent");

                entity.Property(e => e.ActivityCenterNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IsImplementAbc).HasColumnName("IsImplementABC");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.HasOne(d => d.AllocateDriver)
                    .WithMany(p => p.ActivityCenter)
                    .HasForeignKey(d => d.AllocateDriverId)
                    .HasConstraintName("FK_ActivityCenter_AllocateDriver");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ActivityCenter)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenter_BusinessUnit");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ActivityCenter)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenter_Company");

                entity.HasOne(d => d.ParentActivityCenter)
                    .WithMany(p => p.InverseParentActivityCenter)
                    .HasForeignKey(d => d.ParentActivityCenterId)
                    .HasConstraintName("FK_ActivityCenter_Parent");
            });

            modelBuilder.Entity<ActivityCenterAllocateRatio>(entity =>
            {
                entity.HasKey(e => new { e.PeriodDataId, e.ToActivityCenterId, e.FromActivityCenterId, e.ActivityCenterAllocateRatioId });

                entity.Property(e => e.ActivityCenterAllocateRatioId).ValueGeneratedOnAdd();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.ActivityCenterAllocateRatio)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_ActivityCenterAllocateRatio_Driver");

                entity.HasOne(d => d.FromActivityCenter)
                    .WithMany(p => p.ActivityCenterAllocateRatioFromActivityCenter)
                    .HasForeignKey(d => d.FromActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterAllocateRatio_FromActivityCenter");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ActivityCenterAllocateRatio)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterAllocateRatio_PeriodData");

                entity.HasOne(d => d.ToActivityCenter)
                    .WithMany(p => p.ActivityCenterAllocateRatioToActivityCenter)
                    .HasForeignKey(d => d.ToActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterAllocateRatio_ToActivityCenter");

                entity.HasOne(d => d.ToMachineGroup)
                    .WithMany(p => p.ActivityCenterAllocateRatio)
                    .HasForeignKey(d => d.ToMachineGroupId)
                    .HasConstraintName("FK_ActivityCenterAllocateRatio_ToMachineGroup");
            });

            modelBuilder.Entity<ActivityCenterCost>(entity =>
            {
                entity.HasKey(e => new { e.PeriodDataId, e.ActivityCenterId, e.ActivityCenterCostId });

                entity.Property(e => e.ActivityCenterCostId).ValueGeneratedOnAdd();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SourceKey).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ActivityCenterCost)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterCost_ActivityCenter");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.ActivityCenterCost)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_ActivityCenterCost_Driver");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ActivityCenterCost)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ActivityCenterCost_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ActivityCenterCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterCost_PeriodData");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ActivityCenterCost)
                    .HasForeignKey(d => d.ResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterCost_Resource");
            });

            modelBuilder.Entity<ActivityCenterTree>(entity =>
            {
                entity.HasKey(e => new { e.PeriodDataId, e.ActreeId });

                entity.Property(e => e.ActreeId).HasColumnName("ACTreeId");

                entity.Property(e => e.ActivityCenterNo1).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo10).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo11).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo12).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo13).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo14).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo15).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo2).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo3).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo4).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo5).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo6).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo7).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo8).HasMaxLength(50);

                entity.Property(e => e.ActivityCenterNo9).HasMaxLength(50);

                entity.Property(e => e.Description1).HasMaxLength(500);

                entity.Property(e => e.Description10).HasMaxLength(500);

                entity.Property(e => e.Description11).HasMaxLength(500);

                entity.Property(e => e.Description12).HasMaxLength(500);

                entity.Property(e => e.Description13).HasMaxLength(500);

                entity.Property(e => e.Description14).HasMaxLength(500);

                entity.Property(e => e.Description15).HasMaxLength(500);

                entity.Property(e => e.Description2).HasMaxLength(500);

                entity.Property(e => e.Description3).HasMaxLength(500);

                entity.Property(e => e.Description4).HasMaxLength(500);

                entity.Property(e => e.Description5).HasMaxLength(500);

                entity.Property(e => e.Description6).HasMaxLength(500);

                entity.Property(e => e.Description7).HasMaxLength(500);

                entity.Property(e => e.Description8).HasMaxLength(500);

                entity.Property(e => e.Description9).HasMaxLength(500);
            });

            modelBuilder.Entity<ActivityCenterWorkRate>(entity =>
            {
                entity.HasKey(e => e.ActivityCenterWorkRateId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ActivityCenterId, e.MachineGroupId }, "IX_ActivityCenterWorkRate_PeriodData")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.ActRate).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.StdRate).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalActWorkHour).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TotalStdWorkHour).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ActivityCenterWorkRate)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterWorkRate_ActivityCenter");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ActivityCenterWorkRate)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ActivityCenterWorkRate_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ActivityCenterWorkRate)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCenterWorkRate_PeriodData");
            });

            modelBuilder.Entity<ActivityCost>(entity =>
            {
                entity.HasIndex(e => e.ActivityCenterWorkRateId, "IX_ActivityCost_PeriodData");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ExtraWorkHour).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.StdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueObjectAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.WorkHour).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.ActivityCenterWorkRate)
                    .WithMany(p => p.ActivityCost)
                    .HasForeignKey(d => d.ActivityCenterWorkRateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCost_WorkRate");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActivityCost)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityCost_Activity");
            });

            modelBuilder.Entity<ActivityTree>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PeriodDataId, e.ActivityTreeId }, "IX_ActivityTree")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.ActivityName1).HasMaxLength(50);

                entity.Property(e => e.ActivityName2).HasMaxLength(50);

                entity.Property(e => e.ActivityName3).HasMaxLength(50);

                entity.Property(e => e.ActivityName4).HasMaxLength(50);

                entity.Property(e => e.ActivityName5).HasMaxLength(50);

                entity.Property(e => e.ActivityNo1).HasMaxLength(50);

                entity.Property(e => e.ActivityNo2).HasMaxLength(50);

                entity.Property(e => e.ActivityNo3).HasMaxLength(50);

                entity.Property(e => e.ActivityNo4).HasMaxLength(50);

                entity.Property(e => e.ActivityNo5).HasMaxLength(50);

                entity.Property(e => e.Description1).HasMaxLength(500);

                entity.Property(e => e.Description2).HasMaxLength(500);

                entity.Property(e => e.Description3).HasMaxLength(500);

                entity.Property(e => e.Description4).HasMaxLength(500);

                entity.Property(e => e.Description5).HasMaxLength(500);
            });

            modelBuilder.Entity<ActualActivityTime>(entity =>
            {
                entity.HasIndex(e => new { e.DateCode, e.ActivityCenterId, e.MachineGroupId }, "IX_ActualActivityTime_Activity");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Duration)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.Shift).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ActualActivityTime)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .HasConstraintName("FK_ActualActivityTime_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActualActivityTime)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActualActivityTime_Activity");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ActualActivityTime)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ActualActivityTime_MachineGroup");
            });

            modelBuilder.Entity<ActualWorkHour>(entity =>
            {
                entity.HasKey(e => e.ActualWorkHourId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ActivityCenterId, e.MachineGroupId, e.ActivityId }, "IX_ActualWorkHour_PeriodData")
                    .IsClustered();

                entity.Property(e => e.ActWorkHour).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.OvertimeHour).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ActualWorkHourActivityCenter)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActualWorkHour_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActualWorkHour)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActualWorkHour_Activity");

                entity.HasOne(d => d.CopyMachineGroupActivity)
                    .WithMany(p => p.ActualWorkHour)
                    .HasForeignKey(d => d.CopyMachineGroupActivityId)
                    .HasConstraintName("FK_ActualWorkHour_CopyMachineGroupActivity");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ActualWorkHourMachineGroup)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ActualWorkHour_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ActualWorkHour)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActualWorkHour_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ActualWorkHourProduct)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ActualWorkHour_Product");

                entity.HasOne(d => d.SupportedActivityCenter)
                    .WithMany(p => p.ActualWorkHourSupportedActivityCenter)
                    .HasForeignKey(d => d.SupportedActivityCenterId)
                    .HasConstraintName("FK_ActualWorkHour_SupportActivityCenter");

                entity.HasOne(d => d.SupportedMachineGroup)
                    .WithMany(p => p.ActualWorkHourSupportedMachineGroup)
                    .HasForeignKey(d => d.SupportedMachineGroupId)
                    .HasConstraintName("FK_ActualWorkHour_SupportMachineGroup");

                entity.HasOne(d => d.ValueObject)
                    .WithMany(p => p.ActualWorkHourValueObject)
                    .HasForeignKey(d => d.ValueObjectId)
                    .HasConstraintName("FK_ActualWorkHour_ValueObject");
            });

            modelBuilder.Entity<BusinessUnit>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.BusinessUnitNo }, "IX_BusinessUnit")
                    .IsUnique();

                entity.Property(e => e.BusinessUnitNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Locale).HasMaxLength(16);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.BusinessUnit)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnit_Company");
            });

            modelBuilder.Entity<BusinessUnitResource>(entity =>
            {
                entity.HasIndex(e => e.BusinessUnitId, "IX_BusinessUnitResource_BusinessUnit");

                entity.Property(e => e.BusinessUnitResourceNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueObjectType).HasMaxLength(50);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.BusinessUnitResource)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnitResource_BusinessUnit");

                entity.HasOne(d => d.ResourceDriver)
                    .WithMany(p => p.BusinessUnitResource)
                    .HasForeignKey(d => d.ResourceDriverId)
                    .HasConstraintName("FK_BusinessUnitResource_Driver");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.BusinessUnitResource)
                    .HasForeignKey(d => d.ResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BusinessUnitResource_Resource");
            });

            modelBuilder.Entity<Classification>(entity =>
            {
                entity.HasIndex(e => new { e.ClassificationTreeId, e.ClassificationNo1, e.ClassificationNo2, e.ClassificationNo3, e.ClassificationNo4, e.ClassificationNo5, e.ClassificationNo6, e.ClassificationNo7, e.ClassificationNo8, e.ClassificationNo9 }, "IX_Classification_U1")
                    .IsUnique();

                entity.Property(e => e.ClassificationNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassificationNo1)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClassificationNo2).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo3).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo4).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo5).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo6).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo7).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo8).HasMaxLength(50);

                entity.Property(e => e.ClassificationNo9).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ClassificationTree)
                    .WithMany(p => p.Classification)
                    .HasForeignKey(d => d.ClassificationTreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Classification_Tree");

                entity.HasOne(d => d.ParentClassification)
                    .WithMany(p => p.InverseParentClassification)
                    .HasForeignKey(d => d.ParentClassificationId)
                    .HasConstraintName("FK_Classification_Parent");
            });

            modelBuilder.Entity<ClassificationTree>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ClassificationTreeNo }, "IX_ClassificationTree_No")
                    .IsUnique();

                entity.Property(e => e.ClassificationTreeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ClassificationTree)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificationTree_Company");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasIndex(e => e.CompanyNo, "IX_Company")
                    .IsUnique();

                entity.Property(e => e.CompanyNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Industry).HasMaxLength(100);

                entity.Property(e => e.Locale).HasMaxLength(16);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CompanyConfig>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.CompanyConfigNo }, "IX_CompanyConfig_No")
                    .IsUnique();

                entity.Property(e => e.CompanyConfigNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IsEnable).HasDefaultValueSql("('True')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CompanyTransaction>(entity =>
            {
                entity.HasKey(e => new { e.FromCompanyId, e.ToTransactionId, e.Relation, e.UpdateEntityId });

                entity.Property(e => e.Relation).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateEntityNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CurrencyExchange>(entity =>
            {
                entity.HasKey(e => new { e.PeriodDataId, e.FromCurrency, e.ToCurrency });

                entity.Property(e => e.FromCurrency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToCurrency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.CurrencyExchange)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyExchange_PeriodData");
            });

            modelBuilder.Entity<CustomerServiceCost>(entity =>
            {
                entity.HasKey(e => e.CustomerServiceCostId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.BusinessUnitId, e.CustomerId, e.ProductId }, "IX_CustomerServiceCost_PeriodData")
                    .IsClustered();

                entity.Property(e => e.AllocateAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocateStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DirectAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.DirectStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ValueChain).HasMaxLength(50);

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.CustomerServiceCost)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_CustomerServiceCost_Activity");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.CustomerServiceCost)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_CustomerServiceCost_BU");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerServiceCostCustomer)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerServiceCost_Customer");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.CustomerServiceCost)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_CustomerServiceCost_Driver");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.CustomerServiceCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerServiceCost_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CustomerServiceCostProduct)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_CustomerServiceCost_Product");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CustomerServiceCost)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_CustomerServiceCost_Resource");
            });

            modelBuilder.Entity<CustomerServiceCostSum>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PeriodDataId, e.CustomerId, e.ProductId, e.BusinessUnitId }, "CIDX_CustomerServiceCostSum")
                    .IsClustered();

                entity.Property(e => e.AllocateAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocateStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DirectAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.DirectStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ValueChain).HasMaxLength(50);
            });

            modelBuilder.Entity<DataSourceSetting>(entity =>
            {
                entity.Property(e => e.CompanyId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DataSourceSettingNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FromSql).HasColumnName("FromSQL");

                entity.Property(e => e.GroupBySql)
                    .HasColumnName("GroupBySQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HavingSql)
                    .HasColumnName("HavingSQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.OrderBySql)
                    .HasColumnName("OrderBySQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SelectSql)
                    .IsRequired()
                    .HasColumnName("SelectSQL")
                    .HasDefaultValueSql("('*')");

                entity.Property(e => e.WhereSql)
                    .HasColumnName("WhereSQL")
                    .HasDefaultValueSql("('1 = 1')");
            });

            modelBuilder.Entity<Dictionary>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.DictionaryNo, e.Locale }, "IX_Dictionary_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DictionaryNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DisplayText)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsEditable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Locale)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ShortName).HasMaxLength(20);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Dictionary)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Dictionary_Company");
            });

            modelBuilder.Entity<Driver>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.DriverNo, e.DriverEntityName }, "IX_Driver_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DriverEntityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DriverNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Driver)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Driver_Company");
            });

            modelBuilder.Entity<DriverActivity>(entity =>
            {
                entity.HasIndex(e => new { e.DriverId, e.ActivityId, e.ActivityCenterId, e.MachineGroupId }, "IX_DriverActivity_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.DriverId, e.ActivityCenterId, e.MachineGroupId, e.ActivityId }, "IX_DriverActivity_Driver")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DriverActivityNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.DriverActivity)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .HasConstraintName("FK_DriverActivity_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.DriverActivity)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriverActivity_Activity");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.DriverActivity)
                    .HasForeignKey(d => d.DriverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DriverActivity_Driver");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.DriverActivity)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_DriverActivity_MachineGroup");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => new { e.EmployeeNo, e.CompanyId, e.ActivityCenterId }, "AK_Employee_Unique")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_ActivityCenter");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Employee_User");
            });

            modelBuilder.Entity<EntityClassificationTree>(entity =>
            {
                entity.HasIndex(e => new { e.ClassificationTreeId, e.EntityName, e.ObjectClassId }, "IX_EntityClassificationTree_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.EntityName, e.ObjectClassId, e.Property }, "IX_EntityClassificationTree_U2")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EntityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Property)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ClassificationTree)
                    .WithMany(p => p.EntityClassificationTree)
                    .HasForeignKey(d => d.ClassificationTreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityClassificationTree_ClassificationTree");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.EntityClassificationTree)
                    .HasForeignKey(d => d.ObjectClassId)
                    .HasConstraintName("FK_EntityClassificationTree_ObjectClass");
            });

            modelBuilder.Entity<EntityParameter>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.EntityName, e.ObjectClassId, e.Parameter }, "IX_EntityParameter_U1");

                entity.Property(e => e.DataType).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EntityName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntityParameterNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Parameter)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.EntityParameter)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityParameter_Company");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.EntityParameter)
                    .HasForeignKey(d => d.ObjectClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityParameter_ObjectClass");
            });

            modelBuilder.Entity<EntityParameterValue>(entity =>
            {
                entity.HasKey(e => e.EntityParameterValueId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.EntityParameterId, e.EntityPropertyId, e.EntityPropertyValue }, "IX_EntityParameterValue_U1")
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EntityParameterValueNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EntityPropertyValue)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.EntityParameter)
                    .WithMany(p => p.EntityParameterValue)
                    .HasForeignKey(d => d.EntityParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityParameterValue_Parameter");

                entity.HasOne(d => d.EntityProperty)
                    .WithMany(p => p.EntityParameterValue)
                    .HasForeignKey(d => d.EntityPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityParameterValue_EntityProperty");
            });

            modelBuilder.Entity<EntityProperty>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.EntityName, e.ObjectClassId, e.Property }, "IX_EntityProperty_U1")
                    .IsUnique();

                entity.Property(e => e.DefaultValue).HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EntityName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntityPropertyNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Property)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ClassificationTree)
                    .WithMany(p => p.EntityProperty)
                    .HasForeignKey(d => d.ClassificationTreeId)
                    .HasConstraintName("FK_EntityProperty_ClassificationTree");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.EntityProperty)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityProperty_Company");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.EntityProperty)
                    .HasForeignKey(d => d.ObjectClassId)
                    .HasConstraintName("FK_EntityProperty_ObjectClass");

                entity.HasOne(d => d.PickList)
                    .WithMany(p => p.EntityProperty)
                    .HasForeignKey(d => d.PickListId)
                    .HasConstraintName("FK_EntityProperty_PickList");
            });

            modelBuilder.Entity<Function>(entity =>
            {
                entity.HasKey(e => e.FunctionId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.CompanyId, e.FunctionNo }, "IX_Function_1")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FunctionNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Function)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Function_Company");
            });

            modelBuilder.Entity<MachineGroup>(entity =>
            {
                entity.HasIndex(e => new { e.ActivityCenterId, e.MachineGroupNo }, "IX_MachineGroup_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MachineGroupNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MachineGroupType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.MachineGroup)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachineGroup_ActivityCenter");
            });

            modelBuilder.Entity<MachineGroupActivity>(entity =>
            {
                entity.HasIndex(e => new { e.FromMachineGroupId, e.MainMachineGroupId, e.ToActivityId, e.Relation }, "IK_MachineGroupActivity")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.FromMachineGroup)
                    .WithMany(p => p.MachineGroupActivityFromMachineGroup)
                    .HasForeignKey(d => d.FromMachineGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachineGroupActivity_From");

                entity.HasOne(d => d.MainMachineGroup)
                    .WithMany(p => p.MachineGroupActivityMainMachineGroup)
                    .HasForeignKey(d => d.MainMachineGroupId)
                    .HasConstraintName("FK_MachineGroupActivity_MachineGroup");

                entity.HasOne(d => d.ToActivity)
                    .WithMany(p => p.MachineGroupActivity)
                    .HasForeignKey(d => d.ToActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachineGroupActivity_To");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.Locale, e.MessageNo }, "IX_Message_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Locale).HasMaxLength(16);

                entity.Property(e => e.MessageNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Message_Company");
            });

            modelBuilder.Entity<MoListTmp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<MoMaterialCost>(entity =>
            {
                entity.HasIndex(e => new { e.LastPeriodDataId, e.BusinessUnitId, e.TransactionId }, "IX_MoMaterialCost_LastPeriodData");

                entity.HasIndex(e => new { e.ManufactureOrderId, e.BusinessUnitId }, "IX_MoMaterialCost_MO");

                entity.HasIndex(e => new { e.PeriodId, e.MaterialId, e.BusinessUnitId }, "IX_MoMaterialCost_Period");

                entity.Property(e => e.ActivityAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostFrom).HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Moaamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmount");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Momamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmount");

                entity.Property(e => e.PurchaseAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Tpamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("TPAmount");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.MoMaterialCost)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoMaterialCost_BU");

                entity.HasOne(d => d.ManufactureOrder)
                    .WithMany(p => p.MoMaterialCostManufactureOrder)
                    .HasForeignKey(d => d.ManufactureOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoMaterialCost_MO");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.MoMaterialCostMaterial)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoMaterialCost_Material");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.MoMaterialCost)
                    .HasForeignKey(d => d.PeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoMaterialCost_Period");
            });

            modelBuilder.Entity<MoMaterialCostVer>(entity =>
            {
                entity.HasKey(e => new { e.MoMaterialCostId, e.PeriodDataId });

                entity.HasIndex(e => new { e.PeriodId, e.PeriodDataId }, "IX_MoMaterialCostVer_Period");

                entity.Property(e => e.ActivityAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostFrom).HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Moaamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmount");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Momamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmount");

                entity.Property(e => e.PurchaseAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Tpamount)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("TPAmount");
            });

            modelBuilder.Entity<MoProductCost>(entity =>
            {
                entity.HasIndex(e => new { e.LastPeriodDataId, e.BusinessUnitId, e.TransactionId }, "IX_MoProductCost_LastPeriodData");

                entity.HasIndex(e => new { e.ManufactureOrderId, e.BusinessUnitId }, "IX_MoProductCost_MO");

                entity.HasIndex(e => new { e.PeriodId, e.ProductId, e.BusinessUnitId }, "IX_MoProductCost_Period");

                entity.Property(e => e.ActivityAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostFrom).HasMaxLength(50);

                entity.Property(e => e.CostType).HasMaxLength(10);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.LossQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.LotAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MaterialAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ProjectAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmount).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.MoProductCost)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoProductCost_BU");

                entity.HasOne(d => d.ManufactureOrder)
                    .WithMany(p => p.MoProductCostManufactureOrder)
                    .HasForeignKey(d => d.ManufactureOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoProductCost_MO");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.MoProductCost)
                    .HasForeignKey(d => d.PeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoProductCost_Period");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.MoProductCostProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MoProductCost_Product");
            });

            modelBuilder.Entity<MoProductCostVer>(entity =>
            {
                entity.HasKey(e => new { e.MoProductCostId, e.PeriodDataId });

                entity.HasIndex(e => new { e.PeriodId, e.PeriodDataId }, "IX_MoProductCostVer_Period");

                entity.Property(e => e.ActivityAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostFrom).HasMaxLength(50);

                entity.Property(e => e.CostType).HasMaxLength(10);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.LossQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.LotAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MaterialAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ProjectAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmount).HasColumnType("decimal(28, 10)");
            });

            modelBuilder.Entity<Model>(entity =>
            {
                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModelNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Model)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Model_Company");
            });

            modelBuilder.Entity<ModelSnapshot>(entity =>
            {
                entity.HasKey(e => new { e.ModelId, e.EntityName, e.EntityId });

                entity.Property(e => e.EntityName).HasMaxLength(50);
            });

            modelBuilder.Entity<ObjectClass>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ObjectClassNo }, "IX_ObjectClass")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EntityName).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ObjectClassNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ObjectClass)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectClass_Company");
            });

            modelBuilder.Entity<PartStock>(entity =>
            {
                entity.HasIndex(e => new { e.LastPeriodDataId, e.PeriodId }, "IX_PartStock_LastPeriodData");

                entity.HasIndex(e => new { e.PeriodId, e.PartNo, e.BusinessUnitId }, "IX_PartStock_Period")
                    .IsUnique();

                entity.HasIndex(e => e.PrePartStockId, "IX_PartStock_PrePartStock");

                entity.HasIndex(e => e.TransactionId, "IX_PartStock_TransactionId");

                entity.Property(e => e.ActivityAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.BonousQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LossAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.LossQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MoaamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountIn");

                entity.Property(e => e.MoaamountInit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountInit");

                entity.Property(e => e.MoaamountOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountOut");

                entity.Property(e => e.MoaamountRtn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRtn");

                entity.Property(e => e.MoaamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRwkIn");

                entity.Property(e => e.MoaamountRwkOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRwkOut");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.MomamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountIn");

                entity.Property(e => e.MomamountInit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountInit");

                entity.Property(e => e.MomamountOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountOut");

                entity.Property(e => e.MomamountRtn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRtn");

                entity.Property(e => e.MomamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRwkIn");

                entity.Property(e => e.MomamountRwkOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRwkOut");

                entity.Property(e => e.MopamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOPAmountIn");

                entity.Property(e => e.MopamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOPAmountRwkIn");

                entity.Property(e => e.MoramountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MORAmountIn");

                entity.Property(e => e.MoramountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MORAmountRwkIn");

                entity.Property(e => e.PartNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseQtyEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SoldAmountLastSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyDasmOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyLastSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtySoldOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyThisSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferQtyOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Unit).HasMaxLength(10);

                entity.Property(e => e.UnitCostStdActivity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostStdMaterial).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PartStock)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartStock_BU");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.PartStock)
                    .HasForeignKey(d => d.PeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartStock_Period");

                entity.HasOne(d => d.PrePartStock)
                    .WithMany(p => p.InversePrePartStock)
                    .HasForeignKey(d => d.PrePartStockId)
                    .HasConstraintName("FK_PartStock_PrePartStock");
            });

            modelBuilder.Entity<PartStockBom>(entity =>
            {
                entity.HasKey(e => new { e.ProductNo, e.BusinessUnitId, e.Version, e.MaterialNo });

                entity.Property(e => e.ProductNo).HasMaxLength(50);

                entity.Property(e => e.Version).HasMaxLength(50);

                entity.Property(e => e.MaterialNo).HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.PartStockBom)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartStockBom_BU");
            });

            modelBuilder.Entity<PartStockMovement>(entity =>
            {
                entity.HasIndex(e => new { e.PeriodId, e.BusinessUnitId }, "IX_PartStockMovement_Period");

                entity.HasIndex(e => new { e.PeriodId, e.BusinessUnitId, e.MaterialId }, "PartStockMovement_PeriodId_BU_MaterialId");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Movement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Reason1).HasMaxLength(50);

                entity.Property(e => e.Reason2).HasMaxLength(50);

                entity.Property(e => e.Reason3).HasMaxLength(50);

                entity.Property(e => e.Reason4).HasMaxLength(50);

                entity.Property(e => e.Reason5).HasMaxLength(50);
            });

            modelBuilder.Entity<PartStockMovementVer>(entity =>
            {
                entity.HasKey(e => new { e.PartStockMovementId, e.PeriodId, e.PeriodDataId });

                entity.HasIndex(e => new { e.PeriodId, e.PeriodDataId }, "IX_PartStockMovementVer_Period");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Movement)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Reason1).HasMaxLength(50);

                entity.Property(e => e.Reason2).HasMaxLength(50);

                entity.Property(e => e.Reason3).HasMaxLength(50);

                entity.Property(e => e.Reason4).HasMaxLength(50);

                entity.Property(e => e.Reason5).HasMaxLength(50);
            });

            modelBuilder.Entity<PartStockSum>(entity =>
            {
                entity.HasKey(e => e.PartStockId);

                entity.Property(e => e.PartStockId).ValueGeneratedNever();

                entity.Property(e => e.ActivityAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MoaamountEnd)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountEnd");

                entity.Property(e => e.MomamountEnd)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountEnd");

                entity.Property(e => e.ProjectAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCost0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCostSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("StockQtyForUnitCostSO");

                entity.Property(e => e.SupplierAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCost0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivity0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivityInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivitySo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostActivitySO");

                entity.Property(e => e.UnitCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostMoa)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOA");

                entity.Property(e => e.UnitCostMoa0)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOA0");

                entity.Property(e => e.UnitCostMoainit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOAInit");

                entity.Property(e => e.UnitCostMoaso)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOASO");

                entity.Property(e => e.UnitCostMom)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOM");

                entity.Property(e => e.UnitCostMom0)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOM0");

                entity.Property(e => e.UnitCostMominit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOMInit");

                entity.Property(e => e.UnitCostMomso)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOMSO");

                entity.Property(e => e.UnitCostProject).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProject0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProjectInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProjectSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostProjectSO");

                entity.Property(e => e.UnitCostPurchase).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchase0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchaseInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchaseSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostPurchaseSO");

                entity.Property(e => e.UnitCostResource).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResource0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResourceInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResourceSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostResourceSO");

                entity.Property(e => e.UnitCostSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostSO");

                entity.Property(e => e.UnitCostSupplier).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplier0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplierInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplierSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostSupplierSO");

                entity.Property(e => e.UnitCostTransfer).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransfer0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransferInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransferSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostTransferSO");
            });

            modelBuilder.Entity<PartStockSumVer>(entity =>
            {
                entity.HasKey(e => new { e.PartStockId, e.PeriodDataId });

                entity.Property(e => e.ActivityAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MoaamountEnd)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountEnd");

                entity.Property(e => e.MomamountEnd)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountEnd");

                entity.Property(e => e.ProjectAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCost0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyForUnitCostSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("StockQtyForUnitCostSO");

                entity.Property(e => e.SupplierAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCost0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivity0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivityInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostActivitySo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostActivitySO");

                entity.Property(e => e.UnitCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostMoa)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOA");

                entity.Property(e => e.UnitCostMoa0)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOA0");

                entity.Property(e => e.UnitCostMoainit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOAInit");

                entity.Property(e => e.UnitCostMoaso)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOASO");

                entity.Property(e => e.UnitCostMom)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOM");

                entity.Property(e => e.UnitCostMom0)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOM0");

                entity.Property(e => e.UnitCostMominit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOMInit");

                entity.Property(e => e.UnitCostMomso)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostMOMSO");

                entity.Property(e => e.UnitCostProject).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProject0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProjectInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostProjectSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostProjectSO");

                entity.Property(e => e.UnitCostPurchase).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchase0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchaseInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostPurchaseSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostPurchaseSO");

                entity.Property(e => e.UnitCostResource).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResource0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResourceInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostResourceSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostResourceSO");

                entity.Property(e => e.UnitCostSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostSO");

                entity.Property(e => e.UnitCostSupplier).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplier0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplierInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostSupplierSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostSupplierSO");

                entity.Property(e => e.UnitCostTransfer).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransfer0).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransferInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostTransferSo)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("UnitCostTransferSO");
            });

            modelBuilder.Entity<PartStockVer>(entity =>
            {
                entity.HasKey(e => new { e.PartStockId, e.PeriodId, e.PeriodDataId });

                entity.HasIndex(e => new { e.PeriodId, e.PeriodDataId }, "IX_PartStockVer_Period");

                entity.Property(e => e.ActivityAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.BonousQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LossAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.LossQty).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.MoaamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountIn");

                entity.Property(e => e.MoaamountInit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountInit");

                entity.Property(e => e.MoaamountOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountOut");

                entity.Property(e => e.MoaamountRtn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRtn");

                entity.Property(e => e.MoaamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRwkIn");

                entity.Property(e => e.MoaamountRwkOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOAAmountRwkOut");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.MomamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountIn");

                entity.Property(e => e.MomamountInit)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountInit");

                entity.Property(e => e.MomamountOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountOut");

                entity.Property(e => e.MomamountRtn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRtn");

                entity.Property(e => e.MomamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRwkIn");

                entity.Property(e => e.MomamountRwkOut)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOMAmountRwkOut");

                entity.Property(e => e.MopamountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOPAmountIn");

                entity.Property(e => e.MopamountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MOPAmountRwkIn");

                entity.Property(e => e.MoramountIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MORAmountIn");

                entity.Property(e => e.MoramountRwkIn)
                    .HasColumnType("decimal(28, 10)")
                    .HasColumnName("MORAmountRwkIn");

                entity.Property(e => e.PartNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseQtyEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.PurchaseQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SoldAmountLastSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyDasmOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyLastSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtySoldOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StockQtyThisSoldRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SupplierAmountRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRtn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRwkIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferCostRwkOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferPriceOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferQtyIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.TransferQtyOut).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Unit).HasMaxLength(10);

                entity.Property(e => e.UnitCostStdActivity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.UnitCostStdMaterial).HasColumnType("decimal(28, 10)");
            });

            modelBuilder.Entity<Period>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.Year, e.Month }, "IX_Period_1")
                    .IsUnique();

                entity.Property(e => e.PeriodId).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PeriodNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Yymm).HasColumnName("YYMM");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Period)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Period_Company");
            });

            modelBuilder.Entity<PeriodData>(entity =>
            {
                entity.HasIndex(e => e.PeriodId, "IX_PeriodData_Period");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PeriodDataNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.PeriodData)
                    .HasForeignKey(d => d.ModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PeriodData_Model");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.PeriodData)
                    .HasForeignKey(d => d.PeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PeriodData_Period");
            });

            modelBuilder.Entity<PeriodDataRun>(entity =>
            {
                entity.HasKey(e => e.PeriodDataRunId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.PeriodDataRunId }, "IX_PeriodDataRun")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.FinishTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PeriodDataRunNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Result).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.PeriodDataRun)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PeriodDataRun_PeriodData");
            });

            modelBuilder.Entity<PeriodDataRunLog>(entity =>
            {
                entity.HasKey(e => e.PeriodDataRunLogId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataRunId, e.PeriodDataRunLogId }, "IX_PeriodDataRunLog_PeriodDataRun")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.LogType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MessageNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MessageParam).HasMaxLength(250);

                entity.Property(e => e.MessageText).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PeriodDataRunLogNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.PeriodDataRun)
                    .WithMany(p => p.PeriodDataRunLog)
                    .HasForeignKey(d => d.PeriodDataRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PeriodDataRunLog_PeriodDataRun");
            });

            modelBuilder.Entity<PeriodDataRunPerf>(entity =>
            {
                entity.HasKey(e => e.PeriodDataRunPerfId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataRunId, e.PeriodDataRunPerfId }, "IX_PeriodDataRunPerf_PeriodDataRun")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FinishTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PeriodDataRunPerfNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.HasOne(d => d.PeriodDataRun)
                    .WithMany(p => p.PeriodDataRunPerf)
                    .HasForeignKey(d => d.PeriodDataRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PeriodDataRunPerf_PeriodDataRun");
            });

            modelBuilder.Entity<PickList>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.PickListNo }, "IX_PickList_1")
                    .IsUnique();

                entity.Property(e => e.DefaultValue).HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PickListNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.PickList)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PickList_Company");

                entity.HasOne(d => d.ParentPickList)
                    .WithMany(p => p.InverseParentPickList)
                    .HasForeignKey(d => d.ParentPickListId)
                    .HasConstraintName("FK_PickList_PickList");
            });

            modelBuilder.Entity<PickListValue>(entity =>
            {
                entity.HasKey(e => e.PickListValueId)
                    .HasName("PK_PickListValue_1")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PickListId, e.PickListValueNo }, "IX_PickListValue_1")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PickListValueNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ParentPickListValue)
                    .WithMany(p => p.InverseParentPickListValue)
                    .HasForeignKey(d => d.ParentPickListValueId)
                    .HasConstraintName("FK_PickListValue_PickListValue");

                entity.HasOne(d => d.PickList)
                    .WithMany(p => p.PickListValue)
                    .HasForeignKey(d => d.PickListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PickListValue_PickList");
            });

            modelBuilder.Entity<ProductPeriodCost>(entity =>
            {
                entity.HasKey(e => new { e.PeriodDataId, e.ProductId, e.CostType, e.ValueChain });

                entity.Property(e => e.CostType).HasMaxLength(50);

                entity.Property(e => e.ValueChain).HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnitAmount).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ProductPeriodCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductPeriodCost_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPeriodCost)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductPeriodCost_Product");
            });

            modelBuilder.Entity<ProjectCost>(entity =>
            {
                entity.HasKey(e => e.ProjectCostId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ProjectId, e.BusinessUnitId, e.ActivityCenterId, e.ResourceId, e.ActivityId, e.MachineGroupId }, "IX_ProjectCost")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AllocatedAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedPointEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedPointIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedQuantityEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedQuantityIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedStdAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedStdAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedStdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocatedUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.StdAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.StdAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueChain).HasMaxLength(50);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .HasConstraintName("FK_ProjectCost_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_ProjectCost_Activity");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCost_BU");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ProjectCost_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCost_PeriodData");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCost_Project");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ProjectCost)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_ProjectCost_Resource");
            });

            modelBuilder.Entity<ProjectCostAllocation>(entity =>
            {
                entity.HasKey(e => e.ProjectCostAllocationId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.ManufactureOrderId, e.BusinessUnitId }, "IX_ProjectCostAllocation_ManufactureOrder");

                entity.HasIndex(e => new { e.ProjectCostId, e.ProductId, e.CustomerId }, "IX_ProjectCostAllocation_UC")
                    .IsClustered();

                entity.Property(e => e.AllocationAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationPoint).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationQuantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ProjectCostAllocationCustomer)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_ProjectCostAllocation_Customer");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.ProjectCostAllocation)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_ProjectCostAllocation_Driver");

                entity.HasOne(d => d.ManufactureOrder)
                    .WithMany(p => p.ProjectCostAllocationManufactureOrder)
                    .HasForeignKey(d => d.ManufactureOrderId)
                    .HasConstraintName("FK_ProjectCostAllocation_MO");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProjectCostAllocationProduct)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ProjectCostAllocation_Product");

                entity.HasOne(d => d.ProjectCost)
                    .WithMany(p => p.ProjectCostAllocation)
                    .HasForeignKey(d => d.ProjectCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCostAllocation_ProjectCost");
            });

            modelBuilder.Entity<ProjectCostAllocationSum>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PeriodDataId, e.ProjectId, e.ProductId, e.CustomerId, e.BusinessUnitId }, "CIDX_ProjectCostAllocationSum")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AllocationAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueChain).HasMaxLength(50);
            });

            modelBuilder.Entity<ProjectCostAllocationToInvSum>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.PeriodDataId, e.ProjectId, e.ProductId, e.ToStockBusinessUnitId }, "CIDX_ProjectCostAllocationToInvSum")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AllocationAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ProjectCostSum>(entity =>
            {
                entity.HasKey(e => e.ProjectCostSumId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ProjectId }, "IX_ProjectCostSum_PeriodData")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AllocationAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationPointEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationPointIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationQuantityEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationQuantityIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationStdUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.AllocationUnitAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ProjectAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectStdAmountEnd).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectStdAmountIn).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalProjectPoint).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ProjectCostSum)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCostSum_PeriodData");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCostSum)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectCostSum_Project");
            });

            modelBuilder.Entity<ProjectDriverValue>(entity =>
            {
                entity.HasKey(e => e.ProjectDriverValueId)
                    .IsClustered(false);

                entity.HasIndex(e => e.PeriodId, "IX_ProjectDriverValue_PeriodId");

                entity.HasIndex(e => new { e.ProjectDriverId, e.PeriodId }, "IX_ProjectDriverValue_ProjectDriverId_PeriodId")
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnitPoint).HasColumnType("decimal(28, 10)");
            });

            modelBuilder.Entity<PurchaseMaterial>(entity =>
            {
                entity.HasKey(e => new { e.PeriodId, e.BusinessUnitId, e.MaterialId });

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PartNo).HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.RtnAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.RtnQuantity).HasColumnType("decimal(28, 10)");
            });

            modelBuilder.Entity<Reports>(entity =>
            {
                entity.Property(e => e.ActionLink)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IsPeriodNo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OnDateRange)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReportPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReportSubTitle).HasMaxLength(50);

                entity.Property(e => e.ReportTitle).HasMaxLength(100);

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportsNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sqlfrom)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("SQLFrom");

                entity.Property(e => e.Sqlwhere)
                    .HasMaxLength(500)
                    .HasColumnName("SQLWhere");
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ResourceNo }, "IX_Resource_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ProductCostType).HasMaxLength(50);

                entity.Property(e => e.ResourceNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResourceType1).HasMaxLength(50);

                entity.Property(e => e.ResourceType2).HasMaxLength(50);

                entity.Property(e => e.ResourceType3).HasMaxLength(50);

                entity.Property(e => e.ResourceType4).HasMaxLength(50);

                entity.Property(e => e.ResourceType5).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.Property(e => e.ValueObjectType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Resource)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resource_Company");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.Resource)
                    .HasForeignKey(d => d.ObjectClassId)
                    .HasConstraintName("FK_Resource_ObjectClass2");

                entity.HasOne(d => d.ResourceDriver)
                    .WithMany(p => p.ResourceResourceDriver)
                    .HasForeignKey(d => d.ResourceDriverId)
                    .HasConstraintName("FK_Resource_Driver1");

                entity.HasOne(d => d.ServiceDriver)
                    .WithMany(p => p.ResourceServiceDriver)
                    .HasForeignKey(d => d.ServiceDriverId)
                    .HasConstraintName("FK_Resource_Driver");
            });

            modelBuilder.Entity<ResourceAdjustmentCost>(entity =>
            {
                entity.HasKey(e => e.ResourceAdjustmentCostId)
                    .IsClustered(false);

                entity.HasIndex(e => e.PeriodDataId, "IX_ResourceAdjustmentCost")
                    .IsClustered();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SourceKey).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ResourceAdjustmentCost)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAdjustmentCost_ActivityCenter");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.ResourceAdjustmentCost)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_ResourceAdjustmentCost_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ResourceAdjustmentCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAdjustmentCost_PeriodData");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ResourceAdjustmentCost)
                    .HasForeignKey(d => d.ResourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceAdjustmentCost_Resource");

                entity.HasOne(d => d.ValueObject)
                    .WithMany(p => p.ResourceAdjustmentCost)
                    .HasForeignKey(d => d.ValueObjectId)
                    .HasConstraintName("FK_ResourceAdjustmentCost_ValueObject");
            });

            modelBuilder.Entity<SalesOrderItem>(entity =>
            {
                entity.HasIndex(e => new { e.PeriodDataId, e.BusinessUnitId, e.SalesActivityCenterId }, "IX_SalesOrderItem_BU");

                entity.HasIndex(e => new { e.PeriodDataId, e.CustomerId }, "IX_SalesOrderItem_Customer");

                entity.HasIndex(e => new { e.PeriodDataId, e.ProductId, e.CustomerId }, "IX_SalesOrderItem_PeriodDataId");

                entity.Property(e => e.ActivityPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityStdPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Channel).HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ItemNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ManufactureCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ManufactureCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectStdCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourcePeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceStdPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SalesOrderNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ServiceStdCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SoldBy).HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.SalesOrderItemBusinessUnit)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_BU");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SalesOrderItemCustomer)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_Customer");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.SalesOrderItem)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SalesOrderItemProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_Product");

                entity.HasOne(d => d.SalesActivityCenter)
                    .WithMany(p => p.SalesOrderItem)
                    .HasForeignKey(d => d.SalesActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_SalesActivityCenter");

                entity.HasOne(d => d.ShippingBusinessUnit)
                    .WithMany(p => p.SalesOrderItemShippingBusinessUnit)
                    .HasForeignKey(d => d.ShippingBusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItem_ShippingBU");
            });

            modelBuilder.Entity<SalesOrderItemReturn>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.HasOne(d => d.SalesOrderItem)
                    .WithMany(p => p.SalesOrderItemReturn)
                    .HasForeignKey(d => d.SalesOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderItemReturn_SalesOrderItem");
            });

            modelBuilder.Entity<SalesOrderSum>(entity =>
            {
                entity.HasIndex(e => new { e.PeriodDataId, e.ProductId, e.CustomerId }, "IX_SalesOrderSum_PeriodDataId");

                entity.Property(e => e.ActivityPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ActivityStdPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ManufactureCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ManufactureCostInit).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ProjectStdCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourcePeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ResourceStdPeriodCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ServiceCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ServiceStdCost).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.SalesOrderSum)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_SalesOrderSum_BU");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SalesOrderSumCustomer)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_SalesOrderSum_Customer");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.SalesOrderSum)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesOrderSum_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.SalesOrderSumProduct)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_SalesOrderSum_Product");
            });

            modelBuilder.Entity<School>(entity =>
            {
                entity.Property(e => e.Country).HasMaxLength(100);

                entity.Property(e => e.Deadline)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(year,(99),getdate()))");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DomainName).HasMaxLength(500);

                entity.Property(e => e.MaxAccountCount).HasDefaultValueSql("((9999))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SchoolNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<StandardActivityTime>(entity =>
            {
                entity.HasIndex(e => e.ActivityId, "IX_StandardActivityTime_Activity");

                entity.HasIndex(e => new { e.ActivityCenterId, e.ActivityId, e.BusinessUnitId, e.MachineGroupId }, "IX_StandardActivityTime_U1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Duration)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.StandardActivityTime)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .HasConstraintName("FK_StandardActivityTime_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.StandardActivityTime)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StandardActivityTime_Activity");

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.StandardActivityTime)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .HasConstraintName("FK_StandardActivityTime_BU");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.StandardActivityTime)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_StandardActivityTime_MachineGroup");
            });

            modelBuilder.Entity<StandardWorkHour>(entity =>
            {
                entity.HasKey(e => e.StandardWorkHourId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ActivityCenterId, e.MachineGroupId }, "IX_StandardWorkHour")
                    .IsClustered();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.StdWorkHour).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.StandardWorkHour)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StandardWorkHour_ActivityCenter");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.StandardWorkHour)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StandardWorkHour_Activity");

                entity.HasOne(d => d.CopyMachineGroupActivity)
                    .WithMany(p => p.StandardWorkHour)
                    .HasForeignKey(d => d.CopyMachineGroupActivityId)
                    .HasConstraintName("FK_StandardWorkHour_MachineGroupActivity");

                entity.HasOne(d => d.MachineGroup)
                    .WithMany(p => p.StandardWorkHour)
                    .HasForeignKey(d => d.MachineGroupId)
                    .HasConstraintName("FK_StandardWorkHour_MachineGroup");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.StandardWorkHour)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StandardWorkHour_PeriodData");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.Property(e => e.ActualActionTime).HasColumnType("datetime");

                entity.Property(e => e.ClientAppName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ClientSendTime).HasColumnType("datetime");

                entity.Property(e => e.ClientVersion)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.FromNode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Function).HasMaxLength(500);

                entity.Property(e => e.SysEndTime).HasColumnType("datetime");

                entity.Property(e => e.SysStartTime).HasColumnType("datetime");

                entity.Property(e => e.TransactionNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TransferProfit>(entity =>
            {
                entity.HasKey(e => e.TransferProfitId)
                    .IsClustered(false);

                entity.HasIndex(e => e.PeriodDataId, "IX_TransferProfit_PeriodDataId")
                    .IsClustered();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FromPartUnitPrice).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.FromQuantity).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToPartUnitPrice).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.ToQuantity).HasColumnType("decimal(28, 10)");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasIndex(e => e.UserNo, "IX_User_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Gender).HasMaxLength(16);

                entity.Property(e => e.Industry).HasMaxLength(50);

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.UserGroupNo }, "IX_UserGroup_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserGroupNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.UserGroup)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserGroup_Company");
            });

            modelBuilder.Entity<UserGroupFunction>(entity =>
            {
                entity.HasIndex(e => e.FromUserGroupId, "IX_UserGroupFunctionHist_FromUserGroup");

                entity.HasIndex(e => e.ToFunctionId, "IX_UserGroupFunctionHist_ToFunction");

                entity.HasIndex(e => e.FromUserGroupId, "IX_UserGroupFunction_FromUserGroup");

                entity.HasIndex(e => e.ToFunctionId, "IX_UserGroupFunction_ToFunction");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.FromUserGroup)
                    .WithMany(p => p.UserGroupFunction)
                    .HasForeignKey(d => d.FromUserGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserGroupFunction_UserGroup");

                entity.HasOne(d => d.ToFunction)
                    .WithMany(p => p.UserGroupFunction)
                    .HasForeignKey(d => d.ToFunctionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserGroupFunction_Function");
            });

            modelBuilder.Entity<UserUserGroup>(entity =>
            {
                entity.HasIndex(e => e.FromUserId, "IX_UserUserGroup_FromUser");

                entity.HasIndex(e => e.ToUserGroupId, "IX_UserUserGroup_ToUserGroup");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.FromUser)
                    .WithMany(p => p.UserUserGroup)
                    .HasForeignKey(d => d.FromUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUserGroup_User");

                entity.HasOne(d => d.ToUserGroup)
                    .WithMany(p => p.UserUserGroup)
                    .HasForeignKey(d => d.ToUserGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUserGroup_UserGroup");
            });

            modelBuilder.Entity<ValueChain>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ObjectClassId, e.ResourceId, e.ActivityId }, "IX_ValueChain_1")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SysState)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueChainNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ValueChain)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_ValueChain_Activity");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ValueChain)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueChain_Company");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.ValueChain)
                    .HasForeignKey(d => d.ObjectClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueChain_ObjectClass");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ValueChain)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_ValueChain_Resource");
            });

            modelBuilder.Entity<ValueObject>(entity =>
            {
                entity.HasIndex(e => new { e.CompanyId, e.ObjectClassId, e.ValueObjectNo }, "IX_ValueObject")
                    .IsUnique();

                entity.HasIndex(e => e.ActivityCenterId, "IX_ValueObject_ActivityCenter");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.PlanQty).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UserProperty1).HasMaxLength(50);

                entity.Property(e => e.UserProperty10).HasMaxLength(50);

                entity.Property(e => e.UserProperty11).HasMaxLength(50);

                entity.Property(e => e.UserProperty12).HasMaxLength(50);

                entity.Property(e => e.UserProperty13).HasMaxLength(50);

                entity.Property(e => e.UserProperty14).HasMaxLength(50);

                entity.Property(e => e.UserProperty15).HasMaxLength(50);

                entity.Property(e => e.UserProperty16).HasMaxLength(50);

                entity.Property(e => e.UserProperty17).HasMaxLength(50);

                entity.Property(e => e.UserProperty18).HasMaxLength(50);

                entity.Property(e => e.UserProperty19).HasMaxLength(50);

                entity.Property(e => e.UserProperty2).HasMaxLength(50);

                entity.Property(e => e.UserProperty20).HasMaxLength(50);

                entity.Property(e => e.UserProperty3).HasMaxLength(50);

                entity.Property(e => e.UserProperty4).HasMaxLength(50);

                entity.Property(e => e.UserProperty5).HasMaxLength(50);

                entity.Property(e => e.UserProperty6).HasMaxLength(50);

                entity.Property(e => e.UserProperty7).HasMaxLength(50);

                entity.Property(e => e.UserProperty8).HasMaxLength(50);

                entity.Property(e => e.UserProperty9).HasMaxLength(50);

                entity.Property(e => e.ValueObjectNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ActivityCenter)
                    .WithMany(p => p.ValueObject)
                    .HasForeignKey(d => d.ActivityCenterId)
                    .HasConstraintName("FK_ValueObject_ActivityCenter");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ValueObject)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObject_Company");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.ValueObject)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_ValueObject_Driver");

                entity.HasOne(d => d.ObjectClass)
                    .WithMany(p => p.ValueObject)
                    .HasForeignKey(d => d.ObjectClassId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObject_ObjectClass");
            });

            modelBuilder.Entity<ValueObjectCost>(entity =>
            {
                entity.HasKey(e => e.ValueObjectCostId)
                    .IsClustered(false);

                entity.HasIndex(e => new { e.PeriodDataId, e.ObjectClassId, e.ValueObjectId }, "IX_ValueObjectCost_PeriodData")
                    .IsClustered();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label1).HasMaxLength(50);

                entity.Property(e => e.Label10).HasMaxLength(50);

                entity.Property(e => e.Label11).HasMaxLength(50);

                entity.Property(e => e.Label12).HasMaxLength(50);

                entity.Property(e => e.Label13).HasMaxLength(50);

                entity.Property(e => e.Label14).HasMaxLength(50);

                entity.Property(e => e.Label15).HasMaxLength(50);

                entity.Property(e => e.Label2).HasMaxLength(50);

                entity.Property(e => e.Label3).HasMaxLength(50);

                entity.Property(e => e.Label4).HasMaxLength(50);

                entity.Property(e => e.Label5).HasMaxLength(50);

                entity.Property(e => e.Label6).HasMaxLength(50);

                entity.Property(e => e.Label7).HasMaxLength(50);

                entity.Property(e => e.Label8).HasMaxLength(50);

                entity.Property(e => e.Label9).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.SourceKey).HasMaxLength(50);

                entity.Property(e => e.StdAmount).HasColumnType("decimal(28, 10)");

                entity.Property(e => e.SysState)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValueChain).HasMaxLength(50);

                entity.HasOne(d => d.BusinessUnit)
                    .WithMany(p => p.ValueObjectCost)
                    .HasForeignKey(d => d.BusinessUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObjectCost_BU");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.ValueObjectCost)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_ValueObjectCost_Driver");

                entity.HasOne(d => d.FromSupplier)
                    .WithMany(p => p.ValueObjectCostFromSupplier)
                    .HasForeignKey(d => d.FromSupplierId)
                    .HasConstraintName("FK_ValueObjectCost_FromSupplier");

                entity.HasOne(d => d.OwnerActivityCenter)
                    .WithMany(p => p.ValueObjectCost)
                    .HasForeignKey(d => d.OwnerActivityCenterId)
                    .HasConstraintName("FK_ValueObjectCost_ActivityCenter");

                entity.HasOne(d => d.PeriodData)
                    .WithMany(p => p.ValueObjectCost)
                    .HasForeignKey(d => d.PeriodDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObjectCost_PeriodData");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ValueObjectCostProduct)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ValueObjectCost_Product");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ValueObjectCost)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_ValueObjectCost_Resource");

                entity.HasOne(d => d.ValueObject)
                    .WithMany(p => p.ValueObjectCostValueObject)
                    .HasForeignKey(d => d.ValueObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObjectCost_ValueObject");
            });

            modelBuilder.Entity<ValueObjectCostScope>(entity =>
            {
                entity.HasKey(e => new { e.ValueObjectCostId, e.ToValueObjectId });

                entity.HasOne(d => d.ToValueObject)
                    .WithMany(p => p.ValueObjectCostScope)
                    .HasForeignKey(d => d.ToValueObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObjectCostScope_ValueObject");

                entity.HasOne(d => d.ValueObjectCost)
                    .WithMany(p => p.ValueObjectCostScope)
                    .HasForeignKey(d => d.ValueObjectCostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueObjectCostScope_ValueObjectCost");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
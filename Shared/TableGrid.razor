@using BlazorLogin.Service
@using BlazorLogin.Models
@typeparam TItem
@inject IDataServiceFactory ServiceFactory
<TelerikGrid Data="@Data" FilterMode="@GridFilterMode.FilterMenu" AutoGenerateColumns="true"
             Sortable="true" Pageable="true" PageSize="20" Groupable="true" Resizable="true" Reorderable="true"
             OnUpdate="@UpdateHandler" OnDelete="@DeleteHandler" OnCreate="@CreateHandler" EditMode="@GridEditMode.Inline">
    <GridColumns>
        <GridAutoGeneratedColumns />
        <GridCommandColumn Width="200px" Resizable="false">
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="edit" Primary="true">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="plus" Primary="true">Add Forecast</GridCommandButton>
    </GridToolBar>
</TelerikGrid>
@code
{
    public List<TItem> Data { get; set; }
    DataService<TItem> Service { get; set; }
    protected override Task OnInitializedAsync()
    {
        Service = ServiceFactory.Get<TItem>();
        Data = Service.GetAll().ToList();
        return base.OnInitializedAsync();
    }
    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;
        try
        {
            Service.Delete(currItem);
            Data = Service.GetAll().ToList();
        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }
    }

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;

        try
        {
            Service.Insert(currItem);
            Data = Service.GetAll().ToList();

        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }

    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;

        try
        {
            Service.Update(currItem);
            Data = Service.GetAll().ToList();

        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }

    }
}

@using BlazorLogin.Service
@using BlazorLogin.Models
@using System.Reflection
@using System
@typeparam TItem
@inject IDataServiceFactory ServiceFactory
<TelerikGrid Data="@Data" FilterMode="@GridFilterMode.FilterMenu" AutoGenerateColumns="false"
             Sortable="true" Pageable="true" PageSize="20" Groupable="true" Resizable="true" Reorderable="true"
             OnUpdate="@UpdateHandler" OnDelete="@DeleteHandler" OnCreate="@CreateHandler" EditMode="@GridEditMode.Inline" >
    <GridColumns>
        @{
            foreach (var column in Columns)
            {
                PropertyInfo fkcolumn = FKColumns.Find(x => x.Name + "Id" == column.Name);
                if (fkcolumn == null)
                {
                    <GridColumn Field="@column.Name" />
                }
                else
                {
                    List<ForeignKeyModel> list = null;
                    if (list == null)
                    {
                        MethodInfo method1 = typeof(IDataServiceFactory).GetMethod(nameof(IDataServiceFactory.Get));
                        MethodInfo generic1 = method1.MakeGenericMethod(fkcolumn.PropertyType);
                        var dataservice = generic1.Invoke(ServiceFactory, null);
                        MethodInfo generic2 = dataservice.GetType().GetMethod("GetForeignKeys");
                        list = (List<ForeignKeyModel>)generic2.Invoke(dataservice, null);
                    }
                    <GridColumn Field="@column.Name">
                        <EditorTemplate>
                            <TelerikDropDownList Data="list" @bind-Value="@PropertyVars[fkcolumn.Name].Value"
                                                 TextField="@nameof(ForeignKeyModel.Text)"
                                                 ValueField="@nameof(ForeignKeyModel.Id)"
                                                 Width="100%" PopupHeight="auto">
                            </TelerikDropDownList>
                        </EditorTemplate>
                        <Template>
                            @{
                                long Id = (long)typeof(TItem).GetProperty(fkcolumn.Name + "Id").GetValue(context as TItem);
                                //PropertyVars[fkcolumn.Name].Value = Id;
                                ForeignKeyModel matchingPos = list.FirstOrDefault(r => r.Id == Id);
                                string textToRender = matchingPos != null ? matchingPos.Text : "Unknown";
                                <text>@textToRender</text>
                            }
                        </Template>
                    </GridColumn>
                }

            }
        }

        <GridCommandColumn Width="200px" Resizable="false">
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true" >Update</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="edit" Primary="true" OnClick="EditOnClick">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="plus" Primary="true" OnClick="Add">Add</GridCommandButton>
    </GridToolBar>
</TelerikGrid>
@code
{
    public List<TItem> Data { get; set; }
    DataService<TItem> Service { get; set; }
    public TItem CurrentlyInEdit { get; set; }
    List<PropertyInfo> FKColumns { get; set; }
    List<PropertyInfo> Columns { get; set; }

    public Dictionary<string, FormModel> PropertyVars { get; set; } = new Dictionary<string, FormModel>();

    protected override Task OnInitializedAsync()
    {

        Service = ServiceFactory.Get<TItem>();
        Data = Service.GetAll().ToList();
        Columns = typeof(TItem).GetProperties().Where(p => p.GetMethod.IsVirtual == false && p.GetType().IsInterface == false).ToList();
        FKColumns = typeof(TItem).GetProperties().Where(p => p.GetMethod.IsVirtual == true && p.PropertyType.IsGenericType == false).ToList();


        return base.OnInitializedAsync();

    }
    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;
        try
        {
            Service.Delete(currItem);
            Data = Service.GetAll().ToList();
        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }
    }

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;

        try
        {

            foreach (var item in PropertyVars)
            {
                currItem.GetType().GetProperty(item.Key + "Id").SetValue(currItem, item.Value.Value);
            }
            Service.Insert(currItem);
            Data = Service.GetAll().ToList();

        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }

    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;
        foreach (var item in PropertyVars)
        {
            currItem.GetType().GetProperty(item.Key + "Id").SetValue(currItem, item.Value.Value);
        }
        try
        {
            Service.Update(currItem);
            Data = Service.GetAll().ToList();

        }
        catch (Exception ex)
        {
            //await ShowAlert(ex.Message);
        }

    }
    public void EditOnClick(GridCommandEventArgs args)
    {
        TItem currItem = (TItem)args.Item;
        PropertyVars = new Dictionary<string, FormModel>();
        foreach (var key in FKColumns)
        {
            long id = (long)(typeof(TItem).GetProperty(key.Name + "Id").GetValue(currItem));
            var propertyInfo = typeof(TItem).GetProperty(key.Name);
            PropertyVars.Add(key.Name, new FormModel { Value = id });
        }
    }
    public void Add()
    {
        PropertyVars = new Dictionary<string, FormModel>();
        foreach (var key in FKColumns)
        {
            //long id = (long)(typeof(TItem).GetProperty(key.Name + "Id").GetValue(currItem));
            var propertyInfo = typeof(TItem).GetProperty(key.Name);
            PropertyVars.Add(key.Name, new FormModel());
        }
    }
}

@using BlazorLogin.Service
@using BlazorLogin.Models
@using System.Reflection
@using System
@using Telerik.DataSource
@typeparam TItem
@inject IDataServiceFactory ServiceFactory
@inject ITranslator Translator

<TelerikGrid Data="@Data" FilterMode="@GridFilterMode.FilterRow" AutoGenerateColumns="false"
             Sortable="true" Pageable="true" PageSize="100" Resizable="true" Reorderable="true" RowHeight="20" ScrollMode="GridScrollMode.Scrollable" Height="700px"
             OnDelete="@DeleteHandler">
    <GridColumns>
        @{

            foreach (var column in Columns)
            {
                if (column.Viewable)
                {
                    //PropertyInfo fkcolumn = FKColumns.Find(x => x.Name + "Id" == column.Name);
                    if (column.ForeignKey == null)
                    {
                        <GridColumn Field="@column.Column.Name" Title="@Translator.Get(@column.Column.Name)" />
                    }
                    else
                    {
                        List<ForeignKeyModel> list = null;
                        if (list == null)
                        {
                            MethodInfo method1 = typeof(IDataServiceFactory).GetMethod(nameof(IDataServiceFactory.Get));
                            MethodInfo generic1 = method1.MakeGenericMethod(column.ForeignKey.PropertyType);
                            var dataservice = generic1.Invoke(ServiceFactory, null);
                            MethodInfo generic2 = dataservice.GetType().GetMethod("GetForeignKeys");
                            list = (List<ForeignKeyModel>)generic2.Invoke(dataservice, null);
                        }

                        <GridColumn Field="@column.Column.Name" Title="@Translator.Get(column.ForeignKey.Name)">
                            <FilterCellTemplate>
                                <TelerikMultiSelect Data="@list" Placeholder="" Class="no-x-button" ValueChanged="((List<long> list) => ForeignKeyFliter(list, column.Column.Name, context))"
                                                    TextField="@nameof(ForeignKeyModel.Text)" ValueField="@nameof(ForeignKeyModel.Id)" AutoClose="false">
                                </TelerikMultiSelect>
                            </FilterCellTemplate>
                            <Template>
                                @{
                                    var value = typeof(TItem).GetProperty(column.Column.Name).GetValue(context as TItem);
                                    if (value != null)
                                    {
                                        //PropertyVars[fkcolumn.Name].Value = Id;
                                        ForeignKeyModel matchingPos = list.FirstOrDefault(r => r.Id == (long)value);
                                        string textToRender = matchingPos != null ? matchingPos.Text : "Unknown";
                                        <text>@textToRender</text>
                                    }
                                    else
                                    {
                                        <text></text>

                                    }

                                }
                            </Template>
                        </GridColumn>
                    }

                }
            }
        }

        <GridCommandColumn Width="200px" Resizable="false">

            <GridCommandButton Icon="edit" Primary="true" OnClick="EditOnClick">@Translator.Get("Edit")</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">@Translator.Get("Delete")</GridCommandButton>

        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        @*@<GridCommandButton Icon="plus" Primary="true" OnClick="AddOnClick">@Translator.Get("Add")</GridCommandButton>*@
        <GridCommandButton Icon="plus" Primary="true" OnClick="AddOnClick">@Translator.Get("Add")</GridCommandButton>
        <TelerikButton Icon="refresh" OnClick="GetData" Primary="true">@Translator.Get("Refresh")</TelerikButton>
        <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
        <span class="k-toolbar-spacer"></span> @* add this spacer to keep the searchbox on the right *@
        <GridSearchBox />
    </GridToolBar>
    <GridExport>
        <GridExcelExport FileName="telerik-grid-export" AllPages="true" />
    </GridExport>
</TelerikGrid>

@{
    bool show;
    if (EditMode != GridFormEditMode.None)
    {
        show = true;
        <TelerikWindow Centered="true" @bind-Visible="show" Size="@WindowSize.Medium" Modal="true" Draggable="false">
            <WindowTitle>
                @switch (EditMode)
                {
                    case GridFormEditMode.Edit:
                        <strong>@Translator.Get("Edit")</strong>
                        break;
                    case GridFormEditMode.Create:
                        <strong>@Translator.Get("Add")</strong>
                        break;
                }
            </WindowTitle>
            <WindowContent>
                <GridForm TItem="TItem" Item="Edit" Columns="Columns" FKColumns="FKColumns" ReturnItem="OnFormReturn"> </GridForm>
            </WindowContent>
        </TelerikWindow>
    }
    else
    {
        show = false;
    }
}





@code
{

}
